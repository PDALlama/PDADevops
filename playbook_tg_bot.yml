- name: all vm actions
  hosts: all
  become: true
  tasks:
    - name: apt update && apt upgrade
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400 
    
    - name: install needed packages
      apt:
        name:
          - python3    
          - libpq-dev
    
    - name: install psycopg2
      apt:
        name:
          - python3-psycopg2

- name: download postgresql to db and db_repl
  hosts: db_servers
  become: true
  tasks:

    - name: add apt repo key for postgesql
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc

    - name: add apt repo for postgresql
      apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"

    - name: apt update
      apt:
        update_cache: yes

    - name: install postgresql 12
      apt:
        name: 
          - postgresql-12
          - postgresql-contrib
        state: present

- name: configure postgresql 1
  hosts: db
  become: true
  vars:
    pg_data_dir: "/etc/postgresql/12/main"
  tasks:

  
    - name: change postgresql.conf
      lineinfile:
        path: "{{ pg_data_dir }}/postgresql.conf"
        regexp: '^#?{{ item.regexp }}'
        line: '{{ item.line }}'
      loop:
        - { regexp: "listen_addresses =", line: "listen_addresses = '*'" }
        - { regexp: "port =", line: "port = {{ hostvars[inventory_hostname]['DB_PORT'] }}" }
        - { regexp: "wal_level =", line: "wal_level = replica" }
        - { regexp: "archive_mode =", line: "archive_mode = on" }
        - { regexp: "archive_command =", line: "archive_command = 'cp %p /oracle/pg_data/archive/%f'" }
        - { regexp: "max_wal_senders =", line: "max_wal_senders = 10" }
        - { regexp: "wal_log_hints =", line: "wal_log_hints = on" }
        - { regexp: "logging_collector =", line: "logging_collector = on" }
        - { regexp: "log_directory =", line: "log_directory = '/var/log/postgresql'" }
        - { regexp: "log_filename =", line: "log_filename = 'postgresql.log'" }
        - { regexp: "log_replication_commands =", line: "log_replication_commands = on" }

    - name: change pg_hba.conf
      blockinfile:
        path: "{{ pg_data_dir }}/pg_hba.conf"
        block: |
          host {{ hostvars[inventory_hostname]['DB_DATABASE'] }} {{ hostvars[inventory_hostname]['DB_USER'] }} 0.0.0.0/0 trust
          host replication {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} {{ hostvars[inventory_hostname]['DB_REPL_HOST'] }}/24 trust

    - name: create archive dir
      file:
        path: /oracle/pg_data/archive/
        state: directory
        owner: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        group: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        mode: "0755"
        recurse: yes

    - name: restart postgresql
      systemd:
        state: restarted
        daemon_reload: yes
        name: postgresql
    
- name: configure postgresql 2
  hosts: db
  become: true
  become_user: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
  tasks:

    - name: create database
      postgresql_db:
        name: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        state: present
 
    - name: create table emails
      postgresql_query:
        db: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        query: "CREATE TABLE emails(ID SERIAL PRIMARY KEY, email VARCHAR (100) NOT NULL)" 

    - name: create table phone_numbers
      postgresql_query:
        db: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        query: "CREATE TABLE phone_numbers(ID SERIAL PRIMARY KEY, number VARCHAR (50) NOT NULL)"

    - name: insert test emails
      postgresql_query:
        db: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        query: "INSERT INTO emails(email) VALUES ('test1@mail.ru'), ('test2@gmail.com'), ('test3@yandex.ru'), ('test4@ya.ru')"

    - name: insert test phone numbers
      postgresql_query:
        db: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        query: "INSERT INTO phone_numbers(number) VALUES ('88005550000'), ('8-800-555-00-00'), ('8(800) 555 00 00'), ('+7(800)5550000');"

    - name: change postgres db password
      postgresql_user:
        name: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        password: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
        encrypted: yes

    - name: create repl_user
      postgresql_user:
        name: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
        password: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
        role_attr_flags: REPLICATION,LOGIN
        state: present

- name: configure and start db_repl
  hosts: db_repl
  become: true
  vars:
    pg_data_dir: "/etc/postgresql/12/main"
    pg_dir: "/var/lib/postgresql/12/main"
  tasks:

    - name: change postgresql.conf
      lineinfile:
        path: "{{ pg_data_dir }}/postgresql.conf"
        regexp: '^#?{{ item.regexp }}'
        line: '{{ item.line }}'
      loop:
        - { regexp: "listen_addresses =", line: "listen_addresses = '*'" }
        - { regexp: "port =", line: "port = {{ hostvars[inventory_hostname]['DB_PORT'] }}" }

    - name: stop postgresql 
      shell: service postgresql stop
    
    - name: clear postgresql dir
      become_user: "root"
      shell: rm -rf {{ pg_dir }}/*

    - name: checking if delete succesful
      command: find {{ pg_dir }}/ -mindepth 1 -delete
      become: true
      
    - name: try to replicate
      shell:  pg_basebackup -R -h {{ hostvars[inventory_hostname]['DB_HOST'] }} -p {{ hostvars[inventory_hostname]['DB_REPL_PORT'] }} -U {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} -D {{ pg_dir }}/ -P
      become_user: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
      environment:
        PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"

    - name: change pg_der permissions
      file:
        path: "{{ pg_dir }}/"
        owner: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        group: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        recurse: yes
      become: true

    - name: change pg_hba.conf
      blockinfile:
        path: "{{ pg_data_dir }}/pg_hba.conf"
        block: |
          host {{ hostvars[inventory_hostname]['DB_DATABASE'] }} {{ hostvars[inventory_hostname]['DB_USER'] }} 0.0.0.0/0 trust
      become: true

    - name: start postgresql
      shell: service postgresql start
      become: true

- name: start bot
  hosts: bot
  become: true
  vars:
    bot_dir: "/tmp/tg_bot"
  tasks:

    - name: download needed packages
      apt:
        name:
          - git
          - python3-pip
        state: present
        update_cache: yes

    - name: download py requirements
      pip:
        name:
          - paramiko
          - python-dotenv
          - pytelegrambotapi

    - name: download bot
      git:
        repo: "https://github.com/PDALlama/PDADevops.git"
        dest: "{{ bot_dir }}"
        single_branch: yes
        version: tg_bot


    - name: create .env file
      copy:
        dest: "{{ bot_dir }}/.env"
        content: |
          TOKEN = {{ hostvars[inventory_hostname]['TOKEN'] }}
          RM_HOST = {{ hostvars[inventory_hostname]['RM_HOST'] }}
          RM_PORT = {{ hostvars[inventory_hostname]['RM_PORT'] }}
          RM_USER = {{ hostvars[inventory_hostname]['RM_USER'] }}
          RM_PASSWORD = {{ hostvars[inventory_hostname]['RM_PASSWORD'] }}
          DB_HOST = {{ hostvars[inventory_hostname]['DB_HOST'] }}
          DB_PORT = {{ hostvars[inventory_hostname]['DB_PORT'] }}
          DB_USER = {{ hostvars[inventory_hostname]['DB_USER'] }}
          DB_PASSWORD = {{ hostvars[inventory_hostname]['DB_PASSWORD'] }}
          DB_DATABASE = {{ hostvars[inventory_hostname]['DB_DATABASE'] }}
          DB_REPL_HOST = {{ hostvars[inventory_hostname]['DB_REPL_HOST'] }}
          DB_REPL_PORT = {{ hostvars[inventory_hostname]['DB_REPL_PORT'] }}

    - name: start bot in bg with nohup
      shell: "nohup python3 {{ bot_dir }}/bot.py > /dev/null 2>&1 &"
